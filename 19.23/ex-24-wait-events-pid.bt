#!/usr/bin/env -S bpftrace --no-warnings
/*
 * Purpose:
 *   Example that shows how to hook into the oracle wait
 *   event functions kews_update_wait_time and keskthewt.
 *
 *   The script will print the wait events incurred by all
 *   db instances running from the same oracle home and 
 *   the wait event duration (in ns).
 *   
 * Credits:
 *   This script is based on the ora_wait_trace_12c_18c.py
 *   bcc script written by Luca Canali (s. also
 *   https://github.com/LucaCanali/Linux_tracing_scripts/blob/master/BPF-bcc_Userspace_Oracle/ora_wait_trace_12c_18c.py).
 *
 * Author:
 *   Christoph Lutz
 *
 * Date:
 *   Sep-21 2024
 *
 * Notes:
 *   Adjust the ORACLE_HOME path for your environment.
 *
 *   If you have multiple oracle homes, add a uprobe for
 *   every oracle home that you want to trace.
 *
 * Tested on:
 *   Oracle 19.23, OEL 8.10, kernel 5.4.17-2136.330.7.5, bpftrace 0.16
 */

BEGIN
{
    if ($# < 1) {
        printf("\nUsage: ex-24-wait-events-pid.bt <pid>\n\n");
        exit();
    }

    @kspssidst = uptr(0x60009628);
}

uprobe:/u01/app/oracle/product/19.0.0.0/dbhome_1923_1/bin/oracle:kews_update_wait_time
/ pid == $1 /
{
    $ela_us = (uint64) arg1;
    @wait_time[pid] = $ela_us > 0 ? $ela_us : 0;
}

uprobe:/u01/app/oracle/product/19.0.0.0/dbhome_1923_1/bin/oracle:kskthewt
/ pid == $1 && @wait_time[pid] /
{
    $ksledt = *(uint64 *) uptr(0x600069f0);
    $ksled_sz = (uint64) 0x38;

    $ev_num = (uint64) arg1;
    $ev_off = (uint64) ($ev_num * $ksled_sz);

    $kslednam_p = *(uint64 *) uptr($ksledt + $ev_off);
    $kslednam = str($kslednam_p);

    printf("sid: %s pid: %ld comm: %s event#=%d name=", str(@kspssidst), pid, comm, $ev_num);
    printf("%s ", $kslednam);
    printf("ela=%lu\n", @wait_time[pid]);

    @wait_time[pid] = 0;
}

END
{
    clear(@kspssidst);
    clear(@wait_time);
}
